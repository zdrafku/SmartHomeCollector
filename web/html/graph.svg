<?xml version="1.0" encoding="iso-8859-1"?>
<svg xml:space='preserve' xmlns='http://www.w3.org/2000/svg' 
	xmlns:xlink='http://www.w3.org/1999/xlink'
	width='100%' height='100%' 
	viewBox='0 0 600 300'
	preserveAspectRatio='none'
	onload='init(evt)'
>
<g id='graph'>
	<rect id='bg' x1='0' y1='0' width='600' height='300' fill='white' />

	<!-- <text id='graph_in_lbl'  x='60' y='15' fill='green' text-anchor='end'>In</text>

	<text id='graph_in_txt'  x='70' y='15' fill='green'>...</text> -->

	<text id='switch_unit'  x='250' y='15' fill='#435370' cursor='pointer'>Switch to bytes/s</text>
	<text id='switch_scale' x='250' y='35' fill='#435370' cursor='pointer'>Autoscale (follow)</text>

	<text id='error'           x='300' y='125' text-anchor='middle' visibility='hidden' fill='blue'>Cannot get data about interface</text>
	<text id='collect_initial' x='300' y='125' text-anchor='middle' visibility='hidden' fill='gray'>Collecting initial data, please wait...</text>

	<path id='grid' d='M 20 75 L 580 75 M 20 290 L 580 290' stroke='gray' stroke-opacity='0.5' />
	<text id='grid_txt0' x='35' y='20' fill='gray' text-anchor='end'>pin #</text>
	<text id='grid_txt1' x='600' y='73' fill='gray' text-anchor='end'>On</text>
	<text id='grid_txt2' x='600' y='287' fill='gray' text-anchor='end'>Off</text>

	<path id='graph_in'  d='' fill='none' stroke='green' stroke-width='1' stroke-opacity='0.8' />

	<!-- <line id='axis_x' x1='20' y1='290' x2='580' y2='290' stroke='black' />
	<line id='axis_y' x1='20' y1='290' x2='20' y2='0' stroke='black' /> -->
</g>
<script type="text/ecmascript">
<![CDATA[
var status_band=new Object();
status_band.chg_unit="Switch to ";
status_band.chg_scale="Autoscale";
status_band.chg_error="Cannot get data about interface";
status_band.chg_collect_initial="Collecting initial data, please wait...";
status_band.strin="In";
status_band.follow="follow";
status_band.up="up";

var share=new Object();
share.bytes="bytes";

if (typeof getURL == 'undefined') {
	getURL = function(url, callback) {
		if (!url) throw 'No URL for getURL';

		try {
			if (typeof callback.operationComplete == 'function') {
				callback = callback.operationComplete;
			}
		} catch (e) {}

		if (typeof callback != 'function') {
			throw 'No callback function for getURL';
		}

		var http_request = null;
		if (typeof XMLHttpRequest != 'undefined') {
			http_request = new XMLHttpRequest();
		} else if (typeof ActiveXObject != 'undefined') {
			try {
				http_request = new ActiveXObject('Msxml2.XMLHTTP');
			} catch (e) {
				try {
					http_request = new ActiveXObject('Microsoft.XMLHTTP');
				} catch (e) {}
			}
		}
		if (!http_request) {
			throw 'Both getURL and XMLHttpRequest are undefined';
		}

		http_request.onreadystatechange = function() {
			if (http_request.readyState == 4) {
				callback( 
					{
						success : true,
						content : http_request.responseText,
						contentType : http_request.getResponseHeader("Content-Type")
					}
				);
			}
		}
		http_request.open('GET', url, true);
		http_request.send(null);
	}
}

var SVGDoc = null;
var last_ifin = 0;
var last_ugmt = 0;
var max = 0;
var plot_in = new Array();

var max_num_points = 120;  // maximum number of plot data points
var step = 580 / max_num_points ;
var unit = share.bytes;
var scale_type = status_band.follow;

var fetch_url='';

function init(evt) {
	/* hacked in fix for all browsers by spectra
	 * he says is 'ugly', and someone may want to redo the 'right' way */
	fetch_url=location.search.split('?');
	fetch_url='/cgi-bin/fetchif.cgi?' + fetch_url[fetch_url.length-1];
	/* end hacked in fix */	
	SVGDoc = evt.target.ownerDocument;
	do_translation();
	SVGDoc.getElementById("switch_unit").addEventListener("mousedown", switch_unit, false);
	SVGDoc.getElementById("switch_scale").addEventListener("mousedown", switch_scale, false);	
	fetch_data();
	// refresh interval
	setInterval('fetch_data()', 1000);
}

function do_translation() {
	//SVGDoc.getElementById('graph_in_lbl').firstChild.data = status_band.strin;
	SVGDoc.getElementById('switch_unit').firstChild.data = status_band.chg_unit + unit + '/s';
	SVGDoc.getElementById('switch_scale').firstChild.data = status_band.chg_scale + ' (' + scale_type + ')';
	SVGDoc.getElementById('error').firstChild.data = status_band.chg_error;
	SVGDoc.getElementById('collect_initial').firstChild.data = status_band.chg_collect_initial;
}

function switch_unit(event) {
	unit = (unit == 'bits') ? share.bytes : 'bits'; 
	SVGDoc.getElementById('switch_unit').firstChild.data = status_band.chg_unit + unit + '/s';
}

function switch_scale(event) {
	scale_type = (scale_type == status_band.up) ? status_band.follow : status_band.up;
	SVGDoc.getElementById('switch_scale').firstChild.data = status_band.chg_scale + ' (' + scale_type + ')';
}

function fetch_data() {
	if (fetch_url) {
		getURL(fetch_url, plot_data);
	} else {
		handle_error();
	}
}

function plot_data(obj) {
	if (!obj.success) return handle_error();  // getURL failed to get data
	if (!obj.content) return handle_error();  // getURL get empty data, IE problem

	// parse incoming data
	// (format: "date" output, newline, proper line of /proc/net/dev)
	var data=obj.content.split("\n");
	var dateStr=data[0];
	//fake timezone cause the real value might confuse JS
	dateStr=dateStr.replace(/ [A-Z]+ /, ' GMT '); 
	var ugmt=(Date.parse(dateStr))/1000;

	data=data[1].split(/\s+|:/);
	while (data[0]!=parseInt(data[0])) {
		data.shift();
		
		if (0==data.length) return;
	}
	var ifin=parseInt(data[0]);
	
	if (!isNumber(ifin) ) {
		return handle_error();
	}

	var diff_ugmt  = ugmt - last_ugmt;
	var diff_ifin  = ifin - last_ifin;

	if (diff_ugmt == 0) diff_ugmt = 1;  // avoid division by zero

	last_ugmt = ugmt;
	last_ifin = ifin;
	
	switch (plot_in.length) {
	case 0:
		SVGDoc.getElementById("collect_initial").setAttributeNS(null, 'visibility', 'visible');
		plot_in[0] = diff_ifin / diff_ugmt;
		return;
	case 1:
		SVGDoc.getElementById("collect_initial").setAttributeNS(null, 'visibility', 'hidden');
		break;
	case max_num_points:
		// shift plot to left if the maximum number of plot points has been reached
		var i = 0;
		while (i < max_num_points) {
			plot_in[i] = plot_in[i+1];
		}
		plot_in.length--;
	}

	plot_in[plot_in.length] = diff_ifin / diff_ugmt;
	var index_plot = plot_in.length - 1;

	//SVGDoc.getElementById('graph_in_txt').firstChild.data = formatSpeed(plot_in[index_plot], unit);

	// determine peak for sensible scaling
	if (scale_type == status_band.up) {
		if (plot_in[index_plot] > max) max = plot_in[index_plot];
	} else if (scale_type == status_band.follow) {
		i = 0;
		max = 0;
		while (i < plot_in.length) {
			if (plot_in[i] > max) max = plot_in[i];
			i++;
		}
	}

	var rmax=makeRoundMax(max);

	var scale = 288 / rmax;

	var path_in = "M 20 " + (295 - (plot_in[0] * scale));
	for (i = 1; i < plot_in.length; i++) {
		var x = step * i + 15;
		var y_in = 289 - (plot_in[i] * scale);
		path_in += " L" + x + " " + y_in;
	}

	SVGDoc.getElementById('error').setAttributeNS(null, 'visibility', 'hidden');
	SVGDoc.getElementById('graph_in').setAttributeNS(null, 'd', path_in);
}

function makeRoundMax(max) {
	if (unit == share.bytes) {
		rmax = 1250;
		i = 0;
		while (max > rmax) {
			//dump(i+'\n');
			i++;
			if (i && (i % 4 == 0)) {
				rmax *= 1.25;
			} else {
				rmax *= 2;
			}
		}
	} else {
		rmax = 1024;
		i = 0;
		while (max > rmax) {
			i++;
			if (i && (i % 4 == 0)) {
				rmax *= 1.25;
			} else {
				rmax *= 2;
			}
			
			if (i == 8) rmax *= 1.024;
		}
	}
	return rmax;
}

function handle_error() {
	SVGDoc.getElementById("error").setAttributeNS(null, 'visibility', 'visible');
}

function isNumber(a) {
	return typeof a == 'number' && isFinite(a);
}

]]>
</script>
</svg>
